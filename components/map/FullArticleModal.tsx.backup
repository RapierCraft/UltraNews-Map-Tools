'use client';

import { useState, useEffect } from 'react';
import { useTheme } from 'next-themes';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  X, 
  Globe,
  Loader2,
  MapPin,
  Calendar,
  Users,
  Building2,
  Info,
  Image,
  Link,
  BookOpen,
  TrendingUp,
  Clock,
  Award,
  Sparkles
} from 'lucide-react';
import { WikipediaAPI } from '@/lib/wikipedia';
import DefinitionModal from './DefinitionModal';

interface FullArticleModalProps {
  title: string;
  isOpen: boolean;
  onClose: () => void;
}

interface StructuredData {
  overview: string;
  keyFacts: { label: string; value: string; icon: any }[];
  sections: {
    geography?: { content: string; highlights: string[] };
    history?: { content: string; timeline: string[]; keyEvents: string[] };
    culture?: { content: string; aspects: string[] };
    economy?: { content: string; sectors: string[] };
    significance?: { content: string; importance: string[] };
  };
  images: string[];
  relatedTerms: string[];
}

// Enhanced terms for cascading hyperlinks
const ENHANCED_TERMS = {
  'city': 'City', 'country': 'Country', 'capital': 'Capital city', 'province': 'Province',
  'state': 'Federated state', 'continent': 'Continent', 'ocean': 'Ocean', 'sea': 'Sea',
  'river': 'River', 'mountain': 'Mountain', 'valley': 'Valley', 'desert': 'Desert',
  'forest': 'Forest', 'island': 'Island', 'peninsula': 'Peninsula', 'bay': 'Bay',
  'government': 'Government', 'politics': 'Politics', 'economy': 'Economy', 'trade': 'Trade',
  'culture': 'Culture', 'society': 'Society', 'population': 'Population', 'university': 'University',
  'architecture': 'Architecture', 'art': 'Art', 'history': 'History', 'civilization': 'Civilization'
};

const parseWikipediaData = (extract: string, title: string): StructuredData => {
  const sentences = extract.split(/[.!?]+/).filter(s => s.trim().length > 15);
  const text = extract.toLowerCase();
  
  // Extract key facts with intelligent categorization
  const keyFacts = [];
  
  // Population
  const populationMatch = extract.match(/population[^.]*?(\d+[\d,.\s]*(?:million|thousand|billion)?)/i);
  if (populationMatch) {
    keyFacts.push({ label: 'Population', value: populationMatch[1], icon: Users });
  }
  
  // Founded/Established
  const foundedMatch = extract.match(/(founded|established)[^.]*?(\d{4}|\d{1,2}th century)/i);
  if (foundedMatch) {
    keyFacts.push({ label: 'Founded', value: foundedMatch[2], icon: Calendar });
  }
  
  // Area/Size
  const areaMatch = extract.match(/(\d+[\d,.\s]*(?:kmÂ²|square kilometers|acres|hectares))/i);
  if (areaMatch) {
    keyFacts.push({ label: 'Area', value: areaMatch[1], icon: MapPin });
  }
  
  // Type/Classification
  if (text.includes('capital')) {
    keyFacts.push({ label: 'Type', value: 'Capital City', icon: Award });
  } else if (text.includes('city')) {
    keyFacts.push({ label: 'Type', value: 'City', icon: Building2 });
  }
  
  // Extract structured sections
  const sections: any = {};
  
  // Geography section
  const geoSentences = sentences.filter(s => 
    s.toLowerCase().includes('located') || 
    s.toLowerCase().includes('situated') || 
    s.toLowerCase().includes('border') ||
    s.toLowerCase().includes('coast')
  );
  if (geoSentences.length > 0) {
    sections.geography = {
      content: geoSentences.join('. ') + '.',
      highlights: geoSentences.slice(0, 3)
    };
  }
  
  // History section
  const histSentences = sentences.filter(s => 
    /\d{4}|\d{1,2}th century|founded|established|ancient|historic/i.test(s)
  );
  if (histSentences.length > 0) {
    sections.history = {
      content: histSentences.join('. ') + '.',
      timeline: histSentences.filter(s => /\d{4}/.test(s)).slice(0, 4),
      keyEvents: histSentences.slice(0, 3)
    };
  }
  
  // Culture section
  const cultureSentences = sentences.filter(s => 
    s.toLowerCase().includes('culture') || 
    s.toLowerCase().includes('language') || 
    s.toLowerCase().includes('tradition') ||
    s.toLowerCase().includes('art') ||
    s.toLowerCase().includes('religion')
  );
  if (cultureSentences.length > 0) {
    sections.culture = {
      content: cultureSentences.join('. ') + '.',
      aspects: cultureSentences.slice(0, 3)
    };
  }
  
  // Economy section
  const economySentences = sentences.filter(s => 
    s.toLowerCase().includes('economy') || 
    s.toLowerCase().includes('industry') || 
    s.toLowerCase().includes('economic') ||
    s.toLowerCase().includes('business') ||
    s.toLowerCase().includes('trade')
  );
  if (economySentences.length > 0) {
    sections.economy = {
      content: economySentences.join('. ') + '.',
      sectors: economySentences.slice(0, 3)
    };
  }
  
  // Extract related terms
  const relatedTerms = Object.keys(ENHANCED_TERMS).filter(term => 
    text.includes(term.toLowerCase())
  ).slice(0, 12);
  
  return {
    overview: sentences.slice(0, 2).join('. ') + '.',
    keyFacts,
    sections,
    images: [],
    relatedTerms
  };
};

const enhanceTextWithLinks = (text: string, onTermClick: (term: string, e: MouseEvent) => void) => {
  if (!text) return null;
  
  const parts = [];
  let lastIndex = 0;
  const sortedTerms = Object.keys(ENHANCED_TERMS).sort((a, b) => b.length - a.length);
  const replacements: { start: number; end: number; term: string; target: string }[] = [];
  
  // Find all term matches
  sortedTerms.forEach(term => {
    const regex = new RegExp(`\\b${term}\\b`, 'gi');
    let match;
    while ((match = regex.exec(text)) !== null) {
      const overlap = replacements.some(r => 
        (match.index >= r.start && match.index < r.end) ||
        (match.index + match[0].length > r.start && match.index + match[0].length <= r.end)
      );
      
      if (!overlap) {
        replacements.push({
          start: match.index,
          end: match.index + match[0].length,
          term: match[0],
          target: ENHANCED_TERMS[term as keyof typeof ENHANCED_TERMS]
        });
      }
    }
  });
  
  replacements.sort((a, b) => a.start - b.start);
  
  replacements.forEach((replacement, index) => {
    if (replacement.start > lastIndex) {
      parts.push(text.substring(lastIndex, replacement.start));
    }
    
    parts.push(
      <span 
        key={`term-${index}`}
        className="cursor-pointer text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/30 dark:to-purple-900/30 px-2 py-1 rounded-md border border-blue-200 dark:border-blue-700 hover:shadow-lg transition-all duration-300 hover:scale-105 inline-block mx-0.5"
        onClick={(e) => onTermClick(replacement.target, e.nativeEvent)}
      >
        {replacement.term}
      </span>
    );
    
    lastIndex = replacement.end;
  });
  
  if (lastIndex < text.length) {
    parts.push(text.substring(lastIndex));
  }
  
  return parts;
};

export default function FullArticleModal({ title, isOpen, onClose }: FullArticleModalProps) {
  const [structuredData, setStructuredData] = useState<StructuredData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string>('');
  const [selectedTerm, setSelectedTerm] = useState<string>('');
  const [showDefinition, setShowDefinition] = useState(false);
  const [clickPosition, setClickPosition] = useState({ x: 0, y: 0 });
  const [activeTab, setActiveTab] = useState('overview');
  const { theme } = useTheme();
  const isDark = theme === 'dark';

  useEffect(() => {
    if (!isOpen || !title) return;

    const fetchAndStructureData = async () => {
      setIsLoading(true);
      setError('');
      
      try {
        const data = await WikipediaAPI.getPageSummary(title);
        if (data) {
          const structured = parseWikipediaData(data.extract, title);
          structured.images = data.images || [];
          setStructuredData(structured);
        } else {
          setError('Information not available');
        }
      } catch (err) {
        console.error('Failed to fetch data:', err);
        setError('Failed to load information');
      } finally {
        setIsLoading(false);
      }
    };

    fetchAndStructureData();
  }, [title, isOpen]);

  const handleTermClick = (term: string, e: MouseEvent) => {
    setSelectedTerm(term);
    setClickPosition({ x: e.clientX, y: e.clientY });
    setShowDefinition(true);
  };

  if (!isOpen) return null;

  const availableTabs = ['overview'];
  if (structuredData?.sections.geography) availableTabs.push('geography');
  if (structuredData?.sections.history) availableTabs.push('history');
  if (structuredData?.sections.culture || structuredData?.sections.economy) availableTabs.push('insights');

  return (
    <div className="fixed inset-0 z-[9999] bg-black/60 backdrop-blur-sm flex items-center justify-center p-4">
      <Card className={`w-full max-w-7xl h-[95vh] ${isDark ? 'bg-gray-900/98' : 'bg-white/98'} backdrop-blur-xl flex flex-col shadow-2xl border-0 rounded-2xl`}>
        {/* Enhanced Header */}
        <CardHeader className="flex-shrink-0 border-b border-gray-200/30 dark:border-gray-700/30 bg-gradient-to-r from-blue-50/70 via-purple-50/70 to-cyan-50/70 dark:from-blue-900/30 dark:via-purple-900/30 dark:to-cyan-900/30">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="relative p-4 rounded-2xl bg-gradient-to-br from-blue-500 to-purple-600 shadow-lg">
                <Globe className="w-8 h-8 text-white" />
                <div className="absolute -top-1 -right-1 p-1 bg-yellow-400 rounded-full">
                  <Sparkles className="w-3 h-3 text-yellow-800" />
                </div>
              </div>
              <div>
                <h1 className={`text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent`}>
                  {title}
                </h1>
                <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'} mt-1 font-medium`}>
                  Interactive Knowledge Experience
                </p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="lg"
              onClick={onClose}
              className="rounded-full hover:bg-red-100/80 dark:hover:bg-red-900/30 hover:text-red-600 dark:hover:text-red-400 transition-all duration-200"
            >
              <X className="w-6 h-6" />
            </Button>
          </div>
        </CardHeader>

        {/* Content */}
        <CardContent className="flex-1 min-h-0 p-0">
          {isLoading ? (
            <div className="flex items-center justify-center py-20">
              <div className="text-center space-y-6">
                <div className="relative">
                  <Loader2 className="w-16 h-16 animate-spin mx-auto text-blue-600 dark:text-blue-400" />
                  <div className="absolute inset-0 w-16 h-16 mx-auto animate-pulse bg-blue-200/30 dark:bg-blue-800/30 rounded-full" />
                </div>
                <div>
                  <p className={`text-xl font-semibold ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                    Analyzing & Structuring Knowledge
                  </p>
                  <p className={`text-sm ${isDark ? 'text-gray-500' : 'text-gray-400'} mt-2`}>
                    Creating beautiful experience...
                  </p>
                </div>
              </div>
            </div>
          ) : error ? (
            <div className="text-center py-20">
              <div className="w-16 h-16 mx-auto mb-4 bg-red-100 dark:bg-red-900/30 rounded-full flex items-center justify-center">
                <Info className="w-8 h-8 text-red-500" />
              </div>
              <p className={`text-xl ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                {error}
              </p>
            </div>
          ) : structuredData ? (
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full h-full flex flex-col">
              {/* Beautiful Tab Navigation */}
              <div className="border-b border-gray-200/30 dark:border-gray-700/30 bg-gradient-to-r from-gray-50/80 to-blue-50/80 dark:from-gray-800/50 dark:to-blue-900/20 px-8 py-4">
                <TabsList className="grid w-full max-w-3xl mx-auto grid-cols-4 bg-white/80 dark:bg-gray-800/80 shadow-xl rounded-xl border border-gray-200/50 dark:border-gray-700/50 backdrop-blur-sm">
                  <TabsTrigger value="overview" className="flex items-center gap-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-purple-600 data-[state=active]:text-white transition-all duration-300">
                    <BookOpen className="w-4 h-4" />
                    Overview
                  </TabsTrigger>
                  {availableTabs.includes('geography') && (
                    <TabsTrigger value="geography" className="flex items-center gap-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-500 data-[state=active]:to-emerald-600 data-[state=active]:text-white transition-all duration-300">
                      <MapPin className="w-4 h-4" />
                      Geography
                    </TabsTrigger>
                  )}
                  {availableTabs.includes('history') && (
                    <TabsTrigger value="history" className="flex items-center gap-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-red-600 data-[state=active]:text-white transition-all duration-300">
                      <Clock className="w-4 h-4" />
                      History
                    </TabsTrigger>
                  )}
                  {availableTabs.includes('insights') && (
                    <TabsTrigger value="insights" className="flex items-center gap-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500 data-[state=active]:to-pink-600 data-[state=active]:text-white transition-all duration-300">
                      <TrendingUp className="w-4 h-4" />
                      Culture & Economy
                    </TabsTrigger>
                  )}
                </TabsList>
              </div>
              
              <ScrollArea className="flex-1">
                <div className="p-8">
                  {/* Overview Tab */}
                  <TabsContent value="overview" className="mt-0 space-y-8">
                    {/* Hero Section with Image */}
                    {structuredData.images.length > 0 && (
                      <div className="relative w-full h-80 rounded-2xl overflow-hidden bg-gradient-to-br from-blue-100 via-purple-100 to-cyan-100 dark:from-blue-900/30 dark:via-purple-900/30 dark:to-cyan-900/30 border border-gray-200/50 dark:border-gray-700/50 shadow-xl">
                        <img 
                          src={structuredData.images[0]} 
                          alt={title}
                          className="w-full h-full object-cover"
                        />
                        <div className="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent" />
                        <div className="absolute bottom-6 left-6 text-white">
                          <h2 className="text-2xl font-bold mb-2">{title}</h2>
                          <Badge className="bg-white/20 backdrop-blur-sm border-white/30 text-white">
                            Featured Location
                          </Badge>
                        </div>
                      </div>
                    )}
                    
                    {/* Overview Text */}
                    <div className="max-w-5xl mx-auto">
                      <div className={`text-lg leading-relaxed ${isDark ? 'text-gray-200' : 'text-gray-700'} text-center space-y-4`}>
                        {enhanceTextWithLinks(structuredData.overview, handleTermClick)}
                      </div>
                    </div>

                    {/* Key Facts Grid */}
                    {structuredData.keyFacts.length > 0 && (
                      <div className="space-y-4">
                        <h3 className={`text-2xl font-bold ${isDark ? 'text-gray-200' : 'text-gray-800'} text-center flex items-center justify-center gap-3`}>
                          <Info className="w-6 h-6 text-blue-600 dark:text-blue-400" />
                          Quick Facts
                        </h3>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
                          {structuredData.keyFacts.map((fact, index) => {
                            const IconComponent = fact.icon;
                            return (
                              <Card key={index} className={`p-6 text-center ${isDark ? 'bg-gray-800/60' : 'bg-white'} border border-gray-200/50 dark:border-gray-700/50 hover:shadow-xl transition-all duration-300 hover:scale-105 group`}>
                                <div className={`w-12 h-12 mx-auto mb-4 rounded-xl bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center group-hover:from-purple-500 group-hover:to-pink-600 transition-all duration-300`}>
                                  <IconComponent className="w-6 h-6 text-white" />
                                </div>
                                <h4 className={`font-bold text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'} uppercase tracking-wider mb-2`}>
                                  {fact.label}
                                </h4>
                                <p className={`text-lg font-semibold ${isDark ? 'text-gray-100' : 'text-gray-800'}`}>
                                  {fact.value}
                                </p>
                              </Card>
                            );
                          })}
                        </div>
                      </div>
                    )}

                    {/* Related Topics */}
                    {structuredData.relatedTerms.length > 0 && (
                      <div className="space-y-6">
                        <h3 className={`text-2xl font-bold ${isDark ? 'text-gray-200' : 'text-gray-800'} text-center flex items-center justify-center gap-3`}>
                          <Link className="w-6 h-6 text-purple-600 dark:text-purple-400" />
                          Explore Related Topics
                        </h3>
                        <div className="flex flex-wrap justify-center gap-3">
                          {structuredData.relatedTerms.map((term, index) => (
                            <Button
                              key={term}
                              variant="outline"
                              size="sm"
                              onClick={(e) => handleTermClick(ENHANCED_TERMS[term as keyof typeof ENHANCED_TERMS] || term, e.nativeEvent)}
                              className="bg-gradient-to-r from-blue-50 via-purple-50 to-cyan-50 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-cyan-900/20 border-blue-200 dark:border-blue-700 hover:shadow-lg transition-all duration-300 hover:scale-105 hover:from-blue-100 hover:via-purple-100 hover:to-cyan-100 font-medium"
                            >
                              <Sparkles className="w-3 h-3 mr-1" />
                              {term}
                            </Button>
                          ))}
                        </div>
                      </div>
                    )}
                  </TabsContent>

                  {/* Geography Tab */}
                  {structuredData.sections.geography && (
                    <TabsContent value="geography" className="mt-0 space-y-8">
                      <div className="text-center space-y-4">
                        <div className="w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-green-500 to-emerald-600 flex items-center justify-center shadow-xl">
                          <MapPin className="w-8 h-8 text-white" />
                        </div>
                        <h2 className={`text-3xl font-bold ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                          Geographic Profile
                        </h2>
                      </div>
                      
                      <Card className={`p-8 ${isDark ? 'bg-gray-800/60' : 'bg-white'} border border-gray-200/50 dark:border-gray-700/50 rounded-2xl shadow-xl`}>
                        <div className={`text-lg leading-relaxed ${isDark ? 'text-gray-200' : 'text-gray-700'} space-y-6`}>
                          {enhanceTextWithLinks(structuredData.sections.geography.content, handleTermClick)}
                        </div>
                        
                        {structuredData.sections.geography.highlights.length > 0 && (
                          <div className="mt-8 space-y-4">
                            <h4 className={`font-bold text-lg ${isDark ? 'text-gray-300' : 'text-gray-700'} flex items-center gap-2`}>
                              <Award className="w-5 h-5 text-green-600 dark:text-green-400" />
                              Geographic Highlights
                            </h4>
                            <div className="space-y-3">
                              {structuredData.sections.geography.highlights.map((highlight, index) => (
                                <div key={index} className={`p-4 rounded-xl ${isDark ? 'bg-gray-700/40' : 'bg-green-50'} border-l-4 border-green-500 hover:shadow-md transition-all duration-200`}>
                                  <div className={`${isDark ? 'text-gray-200' : 'text-gray-800'} leading-relaxed`}>
                                    {enhanceTextWithLinks(highlight, handleTermClick)}
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </Card>
                    </TabsContent>
                  )}

                  {/* History Tab */}
                  {structuredData.sections.history && (
                    <TabsContent value="history" className="mt-0 space-y-8">
                      <div className="text-center space-y-4">
                        <div className="w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-orange-500 to-red-600 flex items-center justify-center shadow-xl">
                          <Clock className="w-8 h-8 text-white" />
                        </div>
                        <h2 className={`text-3xl font-bold ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                          Historical Journey
                        </h2>
                      </div>
                      
                      <Card className={`p-8 ${isDark ? 'bg-gray-800/60' : 'bg-white'} border border-gray-200/50 dark:border-gray-700/50 rounded-2xl shadow-xl`}>
                        <div className={`text-lg leading-relaxed ${isDark ? 'text-gray-200' : 'text-gray-700'} space-y-6`}>
                          {enhanceTextWithLinks(structuredData.sections.history.content, handleTermClick)}
                        </div>
                        
                        {structuredData.sections.history.timeline.length > 0 && (
                          <div className="mt-8 space-y-4">
                            <h4 className={`font-bold text-lg ${isDark ? 'text-gray-300' : 'text-gray-700'} flex items-center gap-2`}>
                              <Calendar className="w-5 h-5 text-orange-600 dark:text-orange-400" />
                              Historical Timeline
                            </h4>
                            <div className="space-y-4">
                              {structuredData.sections.history.timeline.map((event, index) => (
                                <div key={index} className={`flex items-start gap-4 p-4 rounded-xl ${isDark ? 'bg-gray-700/40' : 'bg-orange-50'} hover:shadow-md transition-all duration-200`}>
                                  <div className="w-3 h-3 rounded-full bg-gradient-to-r from-orange-500 to-red-600 mt-2 flex-shrink-0" />
                                  <div className={`${isDark ? 'text-gray-200' : 'text-gray-800'} leading-relaxed`}>
                                    {enhanceTextWithLinks(event, handleTermClick)}
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </Card>
                    </TabsContent>
                  )}

                  {/* Culture & Economy Tab */}
                  {(structuredData.sections.culture || structuredData.sections.economy) && (
                    <TabsContent value="insights" className="mt-0 space-y-8">
                      <div className="text-center space-y-4">
                        <div className="w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-purple-500 to-pink-600 flex items-center justify-center shadow-xl">
                          <TrendingUp className="w-8 h-8 text-white" />
                        </div>
                        <h2 className={`text-3xl font-bold ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                          Cultural & Economic Insights
                        </h2>
                      </div>
                      
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        {/* Culture Section */}
                        {structuredData.sections.culture && (
                          <Card className={`p-8 ${isDark ? 'bg-gray-800/60' : 'bg-white'} border border-gray-200/50 dark:border-gray-700/50 rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300`}>
                            <div className="flex items-center gap-3 mb-6">
                              <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-500 to-pink-600 flex items-center justify-center">
                                <Users className="w-6 h-6 text-white" />
                              </div>
                              <h4 className={`text-xl font-bold ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                                Cultural Heritage
                              </h4>
                            </div>
                            <div className={`text-base leading-relaxed ${isDark ? 'text-gray-200' : 'text-gray-700'} space-y-4`}>
                              {enhanceTextWithLinks(structuredData.sections.culture.content, handleTermClick)}
                            </div>
                          </Card>
                        )}

                        {/* Economy Section */}
                        {structuredData.sections.economy && (
                          <Card className={`p-8 ${isDark ? 'bg-gray-800/60' : 'bg-white'} border border-gray-200/50 dark:border-gray-700/50 rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300`}>
                            <div className="flex items-center gap-3 mb-6">
                              <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-green-500 to-emerald-600 flex items-center justify-center">
                                <Building2 className="w-6 h-6 text-white" />
                              </div>
                              <h4 className={`text-xl font-bold ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                                Economic Profile
                              </h4>
                            </div>
                            <div className={`text-base leading-relaxed ${isDark ? 'text-gray-200' : 'text-gray-700'} space-y-4`}>
                              {enhanceTextWithLinks(structuredData.sections.economy.content, handleTermClick)}
                            </div>
                          </Card>
                        )}
                      </div>
                    </TabsContent>
                  )}
                </div>
              </ScrollArea>
            </Tabs>
          ) : null}
        </CardContent>
      </Card>

      {/* Cascading Definition Modal */}
      {showDefinition && selectedTerm && (
        <DefinitionModal
          term={selectedTerm}
          isOpen={showDefinition}
          onClose={() => setShowDefinition(false)}
          position={clickPosition}
        />
      )}
    </div>
  );
}